parameters:
  - name: workingDirectory
    displayName: Required. Working Directory or project directory
    type: string

  - name: projectName
    displayName: Required. Project name
    type: string

  - name: beforeBuildInfraSteps
    displayName: Optional. Steps to execute before build infrastructure steps
    type: stepList

  - name: afterBuildInfraSteps
    displayName: Optional. Steps to execute after build infrastructure steps
    type: stepList

jobs:
  - job: buildInfraJob
    displayName: 'Build Infrastructure'
    continueOnError: false

    pool:
      vmImage: 'ubuntu-18.04'

    variables:
      - template: /pipeline_templates/commmon/variables.yml

      - name: projectName
        value: ${{ lower(replace(parameters.projectName, ' ', '-')) }}

      - name: environment
        ${{ if eq( variables['Build.Reason'], 'PullRequest') }}:
          value: 'pr'
        ${{ if ne( variables['Build.Reason'], 'PullRequest') }}:
          value: $[ replace(variables['Build.SourceBranchName'], 'master', 'prod') ]

    steps:
      - template: /pipeline_templates/pipeline_steps_base.yml
        parameters:
          beforeProcessSteps: ${{ parameters.beforeBuildInfraSteps }}
          afterProcessSteps: ${{ parameters.afterBuildInfraSteps }}
          processSteps:
            - task: TerraformInstaller@0
              displayName: 'Install Terraform'

            - task: TerraformCLI@0
              displayName: Terraform init
              condition: succeeded()
              inputs:
                command: 'init'
                workingDirectory: ${{ parameters.workingDirectory}}
                backendType: azurerm
                ensureBackend: true
                backendServiceArm: '${{ variables.infraServiceConnection }}'
                backendAzureRmResourceGroupName: $(infraRG)
                backendAzureRmResourceGroupLocation: $(infraLocation)
                backendAzureRmStorageAccountName: $(storageAccountName)
                backendAzureRmStorageAccountSku: Standard_LRS
                backendAzureRmContainerName: $(containerName)
                backendAzureRmKey: '$(projectName)/$(environment)/terraform.tfstate'
                commandOptions: '-reconfigure'

            - task: TerraformCLI@0
              displayName: Terraform Validate
              condition: succeeded()
              inputs:
                command: 'validate'
                workingDirectory: ${{ parameters.workingDirectory}}

            - task: TerraformCLI@0
              displayName: 'Terraform Plan'
              condition: succeeded()
              inputs:
                command: 'plan'
                workingDirectory: ${{ parameters.workingDirectory}}
                environmentServiceName: '${{ variables.infraServiceConnection }}'
                publishPlanResults: 'TerraformPlanResults'
                commandOptions: '-out=tfplan -var env=$(environment) -var-file=$(environment).tfvars'

            - task: TerraformCLI@0
              displayName: 'Terraform Apply'
              condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
              inputs:
                command: 'apply'
                workingDirectory: ${{ parameters.workingDirectory}}
                environmentServiceName: '${{ variables.infraServiceConnection }}'
                commandOptions: 'tfplan'